[{"path":"index.html","id":"introduction","chapter":"Introduction","heading":"Introduction","text":"book lays ways working together regard collaborative coding Tower Hamlets Health Intelligence Team.written Markdown using bookdown package.","code":""},{"path":"our-values.html","id":"our-values","chapter":"1 Our values","heading":"1 Our values","text":"committed set shared values principles guide ways working.","code":""},{"path":"our-values.html","id":"we-take-pride-in-our-work.","chapter":"1 Our values","heading":"1.1 We take pride in our work.","text":"believe importance writing good code maintainable, scalable, well-documented.believe things right first time leaving growing pile technical debt deal “later”.hold principle even face external pressures deliver things faster.","code":""},{"path":"our-values.html","id":"we-help-each-other-learn.","chapter":"1 Our values","heading":"1.2 We help each other learn.","text":"take code review seriously, catch bugs ensure quality code base, also provide peer feedback support help us learn become better coders.simply approve pull requests silent refactor later “faster just ”! take time teach provide opportunity learn.","code":""},{"path":"our-values.html","id":"we-are-kind-to-each-other.","chapter":"1 Our values","heading":"1.3 We are kind to each other.","text":"express feedback kindly constructively settings including code review, Issue discussions, team meetings. respectful ’s opinions, even disagree.","code":""},{"path":"our-values.html","id":"we-are-honest-with-each-other.","chapter":"1 Our values","heading":"1.4 We are honest with each other.","text":"openly share ideas opinions . engage discussions sincerely offer honest opinion asked.don’t shy away disagreement, appreciate value different opinions know eventual shared conclusion stronger gone rigorous discussion.","code":""},{"path":"working-in-github.html","id":"working-in-github","chapter":"2 Working in GitHub","heading":"2 Working in GitHub","text":"use GitHub work collaboratively maintain visibility team member currently working .","code":""},{"path":"working-in-github.html","id":"why-do-we-need-collaborative-coding-practices","chapter":"2 Working in GitHub","heading":"2.1 Why do we need collaborative coding practices?","text":"ensures don’t duplicate work, e.g. two people picking Issue.helps avoid merge conflicts, giving visibility required avoid working parts scripts time.improves code quality helps us catch bugs hit production, embedding code review workflow.creates audit trail others record discussions specific issues, concluded, actions taken forward .","code":""},{"path":"working-in-github.html","id":"how-we-use-github","chapter":"2 Working in GitHub","heading":"2.2 How we use GitHub","text":"development occurs shared GitHub repo code hosted. work open nobody keeps code hidden away team members private location.use GitHub Issues log track issues, including bugs, requests new features, wild ideas future(!). discuss thoughts Issue’s comments, record offline conversations current future reference.use GitHub Project track current development priorities organise future priorities. populated Issues automatically pulled Project organised assignee. keep respective assigned Issues updated, e.g. marking “Progress” “Complete” necessary, full visibility ’re working .","code":""},{"path":"working-in-github.html","id":"links-for-edith","chapter":"2 Working in GitHub","heading":"2.3 Links for EDITH","text":"GitHub repo: lbth-health-intel/edithGitHub Project: EDITH Planning","code":""},{"path":"git-workflow.html","id":"git-workflow","chapter":"3 Git workflow","heading":"3 Git workflow","text":"follow feature branch workflow. overview can found : Git Feature Branch Workflow (Atlassian)core separate feature branch created contain separate piece work, work formally reviewed another team member via pull request changes merged dev eventually main.ever push changes directly dev main!","code":""},{"path":"git-workflow.html","id":"branching-strategy","chapter":"3 Git workflow","heading":"3.1 Branching strategy","text":"feature branch - individual working branch discrete piece work, e.g. one bug fix one new feature.dev - overall working branch active development occurs. Feature branches created dev merged back dev complete.main - stable version code. ever push main dev, ever end development cycle confident code working correctly.","code":""},{"path":"git-workflow.html","id":"workflow","chapter":"3 Git workflow","heading":"3.2 Workflow","text":"Identify single discrete issue work . ’s existing item GitHub issues, assign issue team members know ’re working . ’s already GitHub Issues, open new GitHub Issue clear description problem/request brief outline planned solution, assign issue .Create feature branch dev contain work issue. Give branch descriptive name.development work, making small discrete commits along way, clear concise commit messages.work complete, open pull request merge changes feature branch dev. Request reviewer - may team member.Work together reviewer integrate necessary changes code.reviewer happy code, must approve PR.PR approved, may merge changes dev delete feature branch.","code":""},{"path":"code-style-guide.html","id":"code-style-guide","chapter":"4 Code style guide","heading":"4 Code style guide","text":"follow tidyverse style guide.","code":""},{"path":"code-style-guide.html","id":"naming","chapter":"4 Code style guide","heading":"4.1 Naming","text":"","code":""},{"path":"code-style-guide.html","id":"general-principles","chapter":"4 Code style guide","heading":"4.1.1 General principles","text":"Good names human-readable: descriptive easy read understand thing .Good names also machine-readable programming-friendly:Use letters, numbers, “_” “-”Use informative prefixes suffixes “tag” related files objectsUse consistent naming system naming group related files objects","code":""},{"path":"code-style-guide.html","id":"file-names","chapter":"4 Code style guide","heading":"4.1.2 File names","text":"addition , file names numerical prefix files scripts need run certain order.","code":""},{"path":"code-style-guide.html","id":"object-names","chapter":"4 Code style guide","heading":"4.1.3 Object names","text":"Use snake case name objects: lowercase letters numbers, words separated “_“.Use nouns refer variables, verbs refer functions.name variable something already common function object R. E.g. name variable TRUE!","code":""},{"path":"code-style-guide.html","id":"documentation","chapter":"4 Code style guide","heading":"4.2 Documentation","text":"scripts start following header:Comment code easy others (future !) understand.Use commented lines visually break script separate sections.","code":"\n#===============================================================================\n# Title:\n# Date created:\n# Author(s):\n# Contributors(s):\n#\n# Purpose:\n#\n# Notes:\n#==============================================================================="},{"path":"code-style-guide.html","id":"code-flow","chapter":"4 Code style guide","heading":"4.2.1 Code flow","text":"Load necessary packages beginning script.functions, use explicit return .e. return(). differs tidyverse guidance offers greater clarity function specifically returns.","code":""},{"path":"app-deployment.html","id":"app-deployment","chapter":"5 App deployment","heading":"5 App deployment","text":"Apps deployed shinyapps.io.maintain several deployments EDITH dashboard.","code":""},{"path":"app-deployment.html","id":"active-deployments","chapter":"5 App deployment","heading":"5.1 Active deployments","text":"","code":""},{"path":"app-deployment.html","id":"edith","chapter":"5 App deployment","heading":"5.1.1 /edith","text":"Deployed main.main site latest stable version released world.","code":""},{"path":"app-deployment.html","id":"edith_testing","chapter":"5 App deployment","heading":"5.1.2 /edith_testing","text":"Deployed dev testing periods.testing site deploy latest features may yet bugs worked . use conducting user testing (possibly make publicly visible keen beans outside testing group interested access new features development).","code":""},{"path":"app-deployment.html","id":"edith_dev","chapter":"5 App deployment","heading":"5.1.3 /edith_dev","text":"Deployed dev sporadic, ad-hoc basis internal testing.internal-site accessible EDITH development team can deploy directly dev whenever like try untested features without affecting users.","code":""},{"path":"app-deployment.html","id":"archival-deployments","chapter":"5 App deployment","heading":"5.2 Archival deployments","text":"release, create archival deployment naming structure “/edith_[version name]” retain copies apps deployed different points time can go back look future need .also retain copies full app files deployment archival SharePoint folder.","code":""}]
